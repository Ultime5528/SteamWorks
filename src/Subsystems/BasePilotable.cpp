// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Encoder.h"
#include "BasePilotable.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/Pilotage.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

BasePilotable::BasePilotable() : Subsystem("BasePilotable") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    moteurG = RobotMap::basePilotableMoteurG;
    moteurD = RobotMap::basePilotableMoteurD;
    robotDrive = RobotMap::basePilotableRobotDrive;
    gyro = RobotMap::basePilotableGyro;

    encoderG = RobotMap::basePilotableEncoderG;
    encoderD = RobotMap::basePilotableEncoderD;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void BasePilotable::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new Pilotage());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void BasePilotable::Drive() {
	robotDrive->ArcadeDrive(Robot::oi->getStick().get());
}

void BasePilotable::Stop() {
	moteurG->Set(0);
	moteurD->Set(0);
}

void BasePilotable::SetMoteur(double value) {
	moteurG->Set(value);
	moteurD->Set(value);
}

double BasePilotable::GetEncoderD()
{
	return encoderD->GetDistance();
}

double BasePilotable::GetEncoderG()
{
	return encoderG->GetDistance();
}

double BasePilotable::GetGyro()
{
	return gyro->GetAngleX();
}

// Put methods for controlling this subsystem
// here. Call these from Commands.

