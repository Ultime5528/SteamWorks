// RobotBuilder Version: 2.0`7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777`

//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include <Robot.h>
#include "Commands/AutoBallesGearRouge.h"
#include "Commands/AutoBallesGearBleu.h"
#include "Commands/AutoGearRedSide.h"
#include "Commands/AutoGearBlueSide.h"
#include "Commands/AutoGearForward.h"
#include "Commands/TimedAvancer.h"
#include "Commands/Tourner.h"
#include "Commands/Avancer.h"


std::shared_ptr<BasePilotable> Robot::basePilotable;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<Camera> Robot::camera;

std::shared_ptr<Treuil> Robot::treuil;

std::shared_ptr<RemonteBalle> Robot::remonteBalle;

std::unique_ptr<OI> Robot::oi;

void Robot::SetupAutoModes()
{
	chooser.AddDefault("No Motion" , nullptr);
	chooser.AddObject("Gear Devant", new AutoGearForward());
	chooser.AddObject("Shoot 4s et Gear Rouge", new AutoBallesGearRouge(4));
	chooser.AddObject("Shoot 4s et Gear Bleu", new AutoBallesGearBleu(4));
	chooser.AddObject("Gear coin rouge", new AutoGearRedSide());
	chooser.AddObject("Gear coin bleu", new AutoGearBlueSide());


/*
	double* value1 = new double(79.0);
	double* value2 = new double(65.0);

	shootChooser.AddDefault("Vitesse shoot : 79.0", value1);
	shootChooser.AddObject("65.0", value2);
*/
}

void Robot::RobotInit() {

#ifdef DASHBOARD_VARIABLES
	frc::DriverStation::ReportError("DASHBOARD_VARIABLES is defined.");
#endif

	RobotMap::init();

	basePilotable.reset(new BasePilotable());
	shooter.reset (new Shooter());
	camera.reset(new Camera());
	treuil.reset(new Treuil());
	remonteBalle.reset(new RemonteBalle());
  
	prefs = Preferences::GetInstance();

	oi.reset(new OI());
	

	SetupAutoModes();

	frc::SmartDashboard::PutData("Modes autonomes", &chooser);
	//frc::SmartDashboard::PutData("Vitesse shoot", &shootChooser);

}



void Robot::DisabledInit(){


}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {

	SetupAutoModes();

	autonomousCommand.reset(chooser.GetSelected());

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Start();
}


void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
	frc::SmartDashboard::PutNumber("Angle tourner", Robot::basePilotable->GetGyro());
}

void Robot::TeleopInit() {

	if (autonomousCommand.get() != nullptr)
		autonomousCommand->Cancel();

/*
	double* result = shootChooser.GetSelected();

	if(result != nullptr)
		Shooter::VITESSE = *result;
*/
}

void Robot::TeleopPeriodic() {

	//frc::SmartDashboard::PutNumber("Encodeur Gauche", basePilotable->GetEncoderG());
	//frc::SmartDashboard::PutNumber("Encodeur Droite", basePilotable->GetEncoderD());
	//frc::SmartDashboard::PutNumber("Angle X", basePilotable->GetGyro());
	//frc::SmartDashboard::PutNumber("Accel Y", basePilotable->GetAccelY());

	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

